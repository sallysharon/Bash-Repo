# Default values for demo.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
# fullnameOverride: demo

replicaCount: 1

image:
  repository: IMG_TAG
  pullPolicy: Always

nameOverride: ""

fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podSecurityContext: {}

securityContext: {}

service:
  type: ClusterIP
  port: 8080

#Read more about this at the link below:
#https://www.getambassador.io/docs/1.5/topics/using/timeouts/
ambassador:
  enabled: "true"
  hostname: cellulant.co.ke
  prefix: /
  timeoutMs: 3000 
  connectTimeoutms: 30000
  idleTimeoutms: 3000

## The following settings are to configure the frequency of the liveness and readiness probes
livenessProbe:
  enabled: false
  initialDelaySeconds: 180
  periodSeconds: 60
  path: /actuator/health

readinessProbe:
  initialDelaySeconds: 180
  periodSeconds: 60
  path: /actuator/health

#Read more about this at the link below:
#https://keda.sh/
kedaprometheus:
  enabled: "false"
  pollingInterval: 60
  cooldownPeriod: 30
  minReplicaCount: 1
  maxReplicaCount: 5
  serverAddress: http://expose-prometheus-metrics.cattle-prometheus-p-nw788.svc.cluster.local:8080
  metricName: container_network_receive_packets_total
  threshold: 999999999900
  query: sort_desc(avg by (namespace) (rate(container_network_receive_packets_total{namespace="namespace",pod_name=~"demo.*",container_name!=""}[5m])))


kedarabbitmq:
  enabled: "false"
  minReplicaCount: 1
  pollingInterval: 30
  cooldownPeriod: 30
  maxReplicaCount: 5
  host: rabbitmq-connection-url-demo-secret
  queueName: queueName
  queueLength: 400000


ingress:
  enabled: "false"
  annotations: 
    kubernetes.io/ingress.class: alb
    # alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: instance
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    # alb.ingress.kubernetes.io/inbound-cidrs: 10.101.0.0/16
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-path: /actuator/health
    alb.ingress.kubernetes.io/success-codes: '200'
    # alb.ingress.kubernetes.io/security-groups:
    # alb.ingress.kubernetes.io/subnets: subnet-xxxx, mySubnet

  hosts:
    - host: ['*']
      paths: ['/*']
  tls: []

resources:
  limits:
    cpu: 200m
    memory: 500Mi
  requests:
    cpu: 150m
    memory: 250Mi

crondependencies:
  enabled: false
  cron: "0 22 * * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  

nodeSelector: {}

tolerations: []

affinity: {}

# A map of additional environment variables
extraVars: {}
  # test1: "test2"
  # APP_ENV: "development"
  # COUNTRY_CODE: "GEN"
  # DATASOURCE_URL: "jdbc:mysql://devmysql:3306/forex" 
  # DATASOURCE_USERNAME: "tingg"
  # DATASOURCE_PASSWORD: "tingg"
  # CAS_URL: ""
  # DEFAULT_CLIENT_CODE: "ADMIN"
  # DEFAULT_CURRENCY_CODE: "USD"
  # - name: SPRING_DATASOURCE_USERNAME
  # valueFrom:
  #   secretKeyRef:
  #     key: database-user
  #     name: tingg-bulkpurchase-credentials
  # - name: SPRING_DATASOURCE_PASSWORD
  #   valueFrom:
  #     secretKeyRef:
  #       key: database-password
  #       name: tingg-bulkpurchase-credentials
